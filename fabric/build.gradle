plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		name "SquidDev"
		url "https://squiddev.cc/maven"
	}
	maven { url 'https://jitpack.io' }
	maven { url "https://maven.shedaniel.me/" }
	maven {
		// Location of the maven for vazkii's mods
		name 'blamejared'
		url 'https://maven.blamejared.com'
	}

	maven { url = "https://api.modrinth.com/maven" } // LazyDFU, Suggestion Tweaker
	maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu, EMI
	maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
	maven { url = "https://mvn.devos.one/snapshots/" } // Create, Porting Lib, Forge Tags, Milk Lib
	maven { url = "https://cursemaven.com" } // Forge Config API Port
	maven { url = "https://maven.tterrag.com/" } // Registrate and Flywheel
	maven { url = "https://maven.cafeteria.dev" } // Fake Player API
	maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
	maven { url = "https://jitpack.io/" } // Mixin Extras, fabric ASM
}

dependencies {
	// dev environment
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modLocalRuntime("maven.modrinth:lazydfu:0.1.2") // lazydfu - improves start times
	modLocalRuntime("maven.modrinth:suggestion-tweaker:${project.suggestion_tweaker_version}") // suggestion tweaker - dev QOL, improves command suggestions
	modLocalRuntime("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") { exclude(group: "net.fabricmc.fabric-api") } // required for suggestion tweaker and REI
	modLocalRuntime("com.terraformersmc:modmenu:${project.modmenu_version}") { exclude group: "net.fabricmc"; exclude group: "net.fabricmc.fabric-api" } // always good to have

	// recipe viewers
	modRuntimeOnly("dev.architectury:architectury-fabric:${project.architectury_version}") // for REI
	modRuntimeOnly("me.shedaniel.cloth:basic-math:0.6.0") // for REI
	modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}") { transitive = false }
	modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") { transitive = false }
	modCompileOnly("dev.emi:emi:${project.emi_version}") { transitive = false }

	def recipeViewer = project.recipe_viewer
	if (recipeViewer == "emi") {
		modLocalRuntime("dev.emi:emi:${project.emi_version}")  { transitive = false }
	} else if (recipeViewer == "rei") {
		modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") { transitive = false }
	} else {
		println("unknown recipe viewer: $recipeViewer")
	}

	// used to prevent forge config api port from complaining
	modImplementation("com.github.AlphaMode:fakeconfig:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }
	modImplementation("com.github.AlphaMode:fakeconfigtoml:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }

	// create setup
	modImplementation("com.simibubi:Create:${project.create_version}") { transitive = false }
	modImplementation("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version}+${project.minecraft_version}-dev.${project.port_lib_hash}")
	modImplementation("me.alphamode:ForgeTags:${project.forge_tags_version}")
	modImplementation(include("com.electronwill.night-config:core:${project.night_config_core_version}"))
	modImplementation(include("com.electronwill.night-config:toml:${project.night_config_toml_version}"))
	modImplementation("curse.maven:forge-config-api-port-fabric-547434:${project.config_api_id}") { transitive = false }
	modImplementation("com.tterrag.registrate:Registrate:${project.registrate_version}")
	modImplementation("com.jozufozu.flywheel:flywheel-fabric-1.18.2:${project.flywheel_version}")
	modImplementation("com.jamieswhiteshirt:reach-entity-attributes:${project.reach_entity_attributes_version}")
	modImplementation("dev.cafeteria:fake-player-api:${project.fake_player_api_version}")
	modImplementation("io.github.tropheusj:milk-lib:${project.milk_lib_version}")
	implementation("com.google.code.findbugs:jsr305:${project.jsr305_version}")

	// CC:R setup
	modImplementation("com.github.cc-tweaked:cc-restitched:${project.cc_version}")

	// dependencies
	modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")










	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"



	modApi "com.github.cc-tweaked:cc-restitched:${project.cc_version}"

	// create setup
	modImplementation("com.simibubi:Create:${project.create_version}") { transitive = false }

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
