plugins {
	id 'fabric-loom' version '1.0.+'
	id "io.github.p03w.machete" version "1.+"
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	mavenLocal()
	mavenCentral()

	repositories {
		maven {
			name = 'ParchmentMC'
			url = 'https://maven.parchmentmc.org'
		}
	}

	maven {
		name "SquidDev"
		url "https://squiddev.cc/maven"
	}
	maven { url 'https://jitpack.io' }
	maven { url "https://maven.shedaniel.me/" }

	maven { url = "https://api.modrinth.com/maven" }					// LazyDFU, Suggestion Tweaker
	maven { url = "https://maven.terraformersmc.com/releases/" }		// Mod Menu, EMI
	maven { url = "https://maven.shedaniel.me/" }						// Cloth Config, REI
	maven { url = "https://mvn.devos.one/snapshots/" }					// Create, Porting Lib, Forge Tags, Milk Lib
	maven { url = "https://cursemaven.com" }							// Forge Config API Port
	maven { url = "https://maven.tterrag.com/" }						// Registrate and Flywheel
	maven { url = "https://maven.cafeteria.dev" }						// Fake Player API
	maven { url = "https://maven.jamieswhiteshirt.com/libs-release" }	// Reach Entity Attributes
	maven { url = "https://jitpack.io/" }								// Mixin Extras, fabric ASM
}

dependencies {
	// Lern' erst mal die Basics!
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	//modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}+${minecraft_version}")

	// Create
	modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_version}+${minecraft_version}")

	// CC:R
	modImplementation("com.github.cc-tweaked:cc-restitched:${project.cc_version}")
	modApi "com.github.cc-tweaked:cc-restitched:${project.cc_version}"

	// dev qol
	modLocalRuntime("maven.modrinth:lazydfu:${lazydfu_version}")
	modLocalRuntime("com.terraformersmc:modmenu:${modmenu_version}")

	// Recipe viewers: Load REI or EMI
	switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
		case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"); break
		case "emi": modLocalRuntime("dev.emi:emi:${emi_version}"); break
		case "disabled": break
		default: println("Unknown recipe viewer specified: ${recipe_viewer}. Must be JEI, REI, EMI, or disabled.")
	}

	// used to prevent forge config api port from complaining
	 modImplementation("com.github.AlphaMode:fakeconfig:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }
	 modImplementation("com.github.AlphaMode:fakeconfigtoml:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
	options.compilerArgs <<"-Xlint:deprecation"
}

java { withSourcesJar() }

jar { from("LICENSE") { rename { "${it}_${project.archivesBaseName}"} } }

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
